A program that simulates the 5-Stage MIPS Pipeline.
The program reads a file named "input.txt", explained using the sample input file below.
Outputs a file named "output.txt" showing instructions executed in every stage(IF, ID, EX, MEM, WB) during each round.
This program handles data hazards, wrong-predictions, and updates register to 1 when lw occurs.

Sample input file:
T                       (T as predict taken, NT as Predict non-taken)
1 1 2 3 2 1 1 1         (initial value of register $16 ~ $23)
add $17, $19, $20       (10 ~ 20 instructions including: lw, sw, add, addi, sub, beq)
beq $18, $19, L1
lw $19, 20($17)
sub $21, $22, $23
add $16, $18, $21
sw $16, 20($17)
L1 :
addi $16, $20, 1 
sw $16, 30($17)
lw $19, 40($17)
sub $21, $22, $19

Sample output file:
===clock cycle 1===
IF :add $17, $19, $20
ID :nop
EX :nop
MEM:nop
WB :nop

===clock cycle 2===
IF :beq $18, $19, L1
ID :add $17, $19, $20
EX :nop
MEM:nop
WB :nop

===clock cycle 3===
IF :Bubble(nop)
ID :beq $18, $19, L1
EX :add $17, $19, $20
MEM:nop
WB :nop

===clock cycle 4===
IF :lw $19, 20($17)
ID :Bubble(nop)
EX :beq $18, $19, L1
MEM:add $17, $19, $20
WB :nop

(...and so on)

$16~$23
3 5 2 1 2 0 1 1
